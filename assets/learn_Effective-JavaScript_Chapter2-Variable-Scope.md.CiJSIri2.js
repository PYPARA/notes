import{_ as i,c as a,o as s,a4 as e}from"./chunks/framework.DhcZWzV3.js";const E=JSON.parse('{"title":"Chapter2: Variable Scope","description":"","frontmatter":{},"headers":[],"relativePath":"learn/Effective-JavaScript/Chapter2-Variable-Scope.md","filePath":"learn/Effective-JavaScript/Chapter2-Variable-Scope.md","lastUpdated":1656568053000}'),t={name:"learn/Effective-JavaScript/Chapter2-Variable-Scope.md"},n=e(`<h1 id="chapter2-variable-scope" tabindex="-1">Chapter2: Variable Scope <a class="header-anchor" href="#chapter2-variable-scope" aria-label="Permalink to &quot;Chapter2: Variable Scope&quot;">​</a></h1><h2 id="item-8-minimize-use-of-the-global-object" tabindex="-1">Item 8: Minimize Use of the Global Object <a class="header-anchor" href="#item-8-minimize-use-of-the-global-object" aria-label="Permalink to &quot;Item 8: Minimize Use of the Global Object&quot;">​</a></h2><h3 id="things-to-remember" tabindex="-1">Things to Remember <a class="header-anchor" href="#things-to-remember" aria-label="Permalink to &quot;Things to Remember&quot;">​</a></h3><ul><li>✦ Avoid declaring global variables.</li><li>✦ Declare variables as locally as possible.</li><li>✦ Avoid adding properties to the global object.</li><li>✦ Use the global object for platform feature detection.</li></ul><h2 id="item-9-always-declare-local-variables" tabindex="-1">Item 9: Always Declare Local Variables <a class="header-anchor" href="#item-9-always-declare-local-variables" aria-label="Permalink to &quot;Item 9: Always Declare Local Variables&quot;">​</a></h2><h3 id="things-to-remember-1" tabindex="-1">Things to Remember <a class="header-anchor" href="#things-to-remember-1" aria-label="Permalink to &quot;Things to Remember&quot;">​</a></h3><ul><li>✦ Always declare new local variables with var.</li><li>✦ Consider using lint tools to help check for unbound variables.</li></ul><h2 id="item-10-avoid-with" tabindex="-1">Item 10: Avoid with <a class="header-anchor" href="#item-10-avoid-with" aria-label="Permalink to &quot;Item 10: Avoid with&quot;">​</a></h2><h3 id="things-to-remember-2" tabindex="-1">Things to Remember <a class="header-anchor" href="#things-to-remember-2" aria-label="Permalink to &quot;Things to Remember&quot;">​</a></h3><ul><li>✦ Avoid using with statements.</li><li>✦ Use short variable names for repeated access to an object.</li><li>✦ Explicitly bind local variables to object properties instead of implic- itly binding them with a with statement.</li></ul><h2 id="item-11-get-comfortable-with-closures" tabindex="-1">Item 11: Get Comfortable with Closures <a class="header-anchor" href="#item-11-get-comfortable-with-closures" aria-label="Permalink to &quot;Item 11: Get Comfortable with Closures&quot;">​</a></h2><ol><li>JavaScript allows you to refer to variables that were defined outside of the current function</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> makeSandwich</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> magicIngredient </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;peanut butter&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> make</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">filling</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> magicIngredient </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot; and &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> filling; </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> make</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jelly&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">makeSandwich</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;peanut butter and jelly&quot;</span></span></code></pre></div><ol start="2"><li>functions can refer to variables defined in outer functions even after those outer functions have returned JavaScript functions are first- class objects, That means that you can return an inner function to be called sometime later on</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sandwichMaker</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> magicIngredient </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;peanut butter&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> make</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">filling</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> magicIngredient </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot; and &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> filling; </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> make; </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> f </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sandwichMaker</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jelly&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;peanut butter and jelly&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;bananas&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;peanut butter and bananas&quot; </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;marshmallows&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;peanut butter and marshmallows&quot;</span></span></code></pre></div><ol start="3"><li>Closures actually store refer- ences to their outer variables, rather than copying their values. So updates are visible to any closures that have access to them</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> box</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> val </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">newVal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { val </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newVal; }, </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> val; },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> val; }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }; </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> box</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">b.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;undefined&quot; </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">b.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">98.6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">b.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 98.6 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">b.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;number&quot;</span></span></code></pre></div><h3 id="things-to-remember-3" tabindex="-1">Things to Remember <a class="header-anchor" href="#things-to-remember-3" aria-label="Permalink to &quot;Things to Remember&quot;">​</a></h3><ul><li>✦ Functions can refer to variables defined in outer scopes.</li><li>✦ Closures can outlive the function that creates them.</li><li>✦ Closures internally store references to their outer variables, and can both read and update their stored variables.</li></ul><h2 id="item-12-understand-variable-hoisting" tabindex="-1">Item 12: Understand Variable Hoisting <a class="header-anchor" href="#item-12-understand-variable-hoisting" aria-label="Permalink to &quot;Item 12: Understand Variable Hoisting&quot;">​</a></h2><h3 id="things-to-remember-4" tabindex="-1">Things to Remember <a class="header-anchor" href="#things-to-remember-4" aria-label="Permalink to &quot;Things to Remember&quot;">​</a></h3><ul><li>✦ Variable declarations within a block are implicitly hoisted to the top of their enclosing function.</li><li>✦ Redeclarations of a variable are treated as a single variable.</li><li>✦ Consider manually hoisting local variable declarations to avoid confusion.</li></ul><h2 id="item-13-use-immediately-invoked-function-expressions-to-create-local-scopes" tabindex="-1">Item 13: Use Immediately Invoked Function Expressions to Create Local Scopes <a class="header-anchor" href="#item-13-use-immediately-invoked-function-expressions-to-create-local-scopes" aria-label="Permalink to &quot;Item 13: Use Immediately Invoked Function Expressions to Create Local Scopes&quot;">​</a></h2><h3 id="things-to-remember-5" tabindex="-1">Things to Remember <a class="header-anchor" href="#things-to-remember-5" aria-label="Permalink to &quot;Things to Remember&quot;">​</a></h3><ul><li>✦ Understand the difference between binding and assignment.</li><li>✦ Closures capture their outer variables by reference, not by value.</li><li>✦ Use immediately invoked function expressions (IIFEs) to create local scopes.</li><li>✦ Be aware of the cases where wrapping a block in an IIFE can change its behavior.</li></ul><h2 id="item-14-beware-of-unportable-scoping-of-named-function-expressions" tabindex="-1">Item 14: Beware of Unportable Scoping of Named Function Expressions <a class="header-anchor" href="#item-14-beware-of-unportable-scoping-of-named-function-expressions" aria-label="Permalink to &quot;Item 14: Beware of Unportable Scoping of Named Function Expressions&quot;">​</a></h2><h3 id="things-to-remember-6" tabindex="-1">Things to Remember <a class="header-anchor" href="#things-to-remember-6" aria-label="Permalink to &quot;Things to Remember&quot;">​</a></h3><ul><li>✦ Use named function expressions to improve stack traces in Error objects and debuggers.</li><li>✦ Beware of pollution of function expression scope with Object .prototype in ES3 and buggy JavaScript environments.</li><li>✦ Beware of hoisting and duplicate allocation of named function expressions in buggy JavaScript environments.</li><li>✦ Consider avoiding named function expressions or removing them before shipping.</li><li>✦ If you are shipping in properly implemented ES5 environments, you’ve got nothing to worry about.</li></ul><h2 id="item-15-beware-of-unportable-scoping-of-block-local-function-declarations" tabindex="-1">Item 15: Beware of Unportable Scoping of Block-Local Function Declarations <a class="header-anchor" href="#item-15-beware-of-unportable-scoping-of-block-local-function-declarations" aria-label="Permalink to &quot;Item 15: Beware of Unportable Scoping of Block-Local Function Declarations&quot;">​</a></h2><h3 id="things-to-remember-7" tabindex="-1">Things to Remember <a class="header-anchor" href="#things-to-remember-7" aria-label="Permalink to &quot;Things to Remember&quot;">​</a></h3><ul><li>✦ Always keep function declarations at the outermost level of a program or a containing function to avoid unportable behavior.</li><li>✦ Use var declarations with conditional assignment instead of conditional function declarations.</li></ul><h2 id="item-16-avoid-creating-local-variables-with-eval" tabindex="-1">Item 16: Avoid Creating Local Variables with eval <a class="header-anchor" href="#item-16-avoid-creating-local-variables-with-eval" aria-label="Permalink to &quot;Item 16: Avoid Creating Local Variables with eval&quot;">​</a></h2><h3 id="things-to-remember-8" tabindex="-1">Things to Remember <a class="header-anchor" href="#things-to-remember-8" aria-label="Permalink to &quot;Things to Remember&quot;">​</a></h3><ul><li>✦ Avoid creating variables with eval that pollute the caller’s scope.</li><li>✦ If eval code might create global variables, wrap the call in a nested function to prevent scope pollution.</li></ul><h2 id="item-17-prefer-indirect-eval-to-direct-eval" tabindex="-1">Item 17: Prefer Indirect eval to Direct eval <a class="header-anchor" href="#item-17-prefer-indirect-eval-to-direct-eval" aria-label="Permalink to &quot;Item 17: Prefer Indirect eval to Direct eval&quot;">​</a></h2><h3 id="things-to-remember-9" tabindex="-1">Things to Remember <a class="header-anchor" href="#things-to-remember-9" aria-label="Permalink to &quot;Things to Remember&quot;">​</a></h3><ul><li>✦ Wrap eval in a sequence expression with a useless literal to force the use of indirect eval.</li><li>✦ Prefer indirect eval to direct eval whenever possible.</li></ul>`,37),l=[n];function h(r,o,p,k,d,c){return s(),a("div",null,l)}const u=i(t,[["render",h]]);export{E as __pageData,u as default};
