import{_ as e,c as t,o,a4 as r}from"./chunks/framework.DhcZWzV3.js";const f=JSON.parse('{"title":"Chapter4: Objects and Prototypes","description":"","frontmatter":{},"headers":[],"relativePath":"learn/Effective-JavaScript/Chapter4-Objects-and-Prototypes.md","filePath":"learn/Effective-JavaScript/Chapter4-Objects-and-Prototypes.md","lastUpdated":1656568053000}'),a={name:"learn/Effective-JavaScript/Chapter4-Objects-and-Prototypes.md"},n=r('<h1 id="chapter4-objects-and-prototypes" tabindex="-1">Chapter4: Objects and Prototypes <a class="header-anchor" href="#chapter4-objects-and-prototypes" aria-label="Permalink to &quot;Chapter4: Objects and Prototypes&quot;">​</a></h1><h2 id="item-30-understand-the-difference-between-prototype-getprototypeof-and-proto" tabindex="-1">Item 30: Understand the Difference between prototype, getPrototypeOf, and <strong>proto</strong> <a class="header-anchor" href="#item-30-understand-the-difference-between-prototype-getprototypeof-and-proto" aria-label="Permalink to &quot;Item 30: Understand the Difference between prototype, getPrototypeOf, and __proto__&quot;">​</a></h2><h3 id="things-to-remember" tabindex="-1">Things to Remember <a class="header-anchor" href="#things-to-remember" aria-label="Permalink to &quot;Things to Remember&quot;">​</a></h3><ul><li>✦ C.prototype determines the prototype of objects created by new C().</li><li>✦ Object.getPrototypeOf(obj) is the standard ES5 function for retrieving the prototype of an object.</li><li>✦ obj.<strong>proto</strong> is a nonstandard mechanism for retrieving the prototype of an object.</li><li>✦ A class is a design pattern consisting of a constructor function and an associated prototype.</li></ul><h2 id="item-31-prefer-object-getprototypeof-to-proto" tabindex="-1">Item 31: Prefer Object.getPrototypeOf to <strong>proto</strong> <a class="header-anchor" href="#item-31-prefer-object-getprototypeof-to-proto" aria-label="Permalink to &quot;Item 31: Prefer Object.getPrototypeOf to __proto__&quot;">​</a></h2><h3 id="things-to-remember-1" tabindex="-1">Things to Remember <a class="header-anchor" href="#things-to-remember-1" aria-label="Permalink to &quot;Things to Remember&quot;">​</a></h3><p>✦ Prefer the standards-compliant Object.getPrototypeOf to the non-standard <strong>proto</strong> property. ✦ Implement Object.getPrototypeOf in non-ES5 environments that support <strong>proto</strong>.</p><h2 id="item-32-never-modify-proto" tabindex="-1">Item 32: Never Modify <strong>proto</strong> <a class="header-anchor" href="#item-32-never-modify-proto" aria-label="Permalink to &quot;Item 32: Never Modify __proto__&quot;">​</a></h2><h3 id="things-to-remember-2" tabindex="-1">Things to Remember <a class="header-anchor" href="#things-to-remember-2" aria-label="Permalink to &quot;Things to Remember&quot;">​</a></h3><ul><li>✦ Never modify an object’s <strong>proto</strong> property.</li><li>✦ Use Object.create to provide a custom prototype for new objects.</li></ul><h2 id="item-33-make-your-constructors-new-agnostic" tabindex="-1">Item 33: Make Your Constructors new-Agnostic <a class="header-anchor" href="#item-33-make-your-constructors-new-agnostic" aria-label="Permalink to &quot;Item 33: Make Your Constructors new-Agnostic&quot;">​</a></h2><h3 id="things-to-remember-3" tabindex="-1">Things to Remember <a class="header-anchor" href="#things-to-remember-3" aria-label="Permalink to &quot;Things to Remember&quot;">​</a></h3><ul><li>✦ Make a constructor agnostic to its caller’s syntax by reinvoking itself with new or with Object.create.</li><li>✦ Document clearly when a function expects to be called with new.</li></ul><h2 id="item-34-store-methods-on-prototypes" tabindex="-1">Item 34: Store Methods on Prototypes <a class="header-anchor" href="#item-34-store-methods-on-prototypes" aria-label="Permalink to &quot;Item 34: Store Methods on Prototypes&quot;">​</a></h2><h3 id="things-to-remember-4" tabindex="-1">Things to Remember <a class="header-anchor" href="#things-to-remember-4" aria-label="Permalink to &quot;Things to Remember&quot;">​</a></h3><ul><li>✦ Storing methods on instance objects creates multiple copies of the functions, one per instance object.</li><li>✦ Prefer storing methods on prototypes over storing them on instance objects.</li></ul><h2 id="item-35-use-closures-to-store-private-data" tabindex="-1">Item 35: Use Closures to Store Private Data <a class="header-anchor" href="#item-35-use-closures-to-store-private-data" aria-label="Permalink to &quot;Item 35: Use Closures to Store Private Data&quot;">​</a></h2><h3 id="things-to-remember-5" tabindex="-1">Things to Remember <a class="header-anchor" href="#things-to-remember-5" aria-label="Permalink to &quot;Things to Remember&quot;">​</a></h3><ul><li>✦ Closure variables are private, accessible only to local references.</li><li>✦ Use local variables as private data to enforce information hiding within methods.</li></ul><h2 id="item-36-store-instance-state-only-on-instance-objects" tabindex="-1">Item 36: Store Instance State Only on Instance Objects <a class="header-anchor" href="#item-36-store-instance-state-only-on-instance-objects" aria-label="Permalink to &quot;Item 36: Store Instance State Only on Instance Objects&quot;">​</a></h2>',20),s=[n];function i(c,h,l,m,p,d){return o(),t("div",null,s)}const u=e(a,[["render",i]]);export{f as __pageData,u as default};
