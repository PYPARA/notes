import{_ as i,c as s,o as a,a4 as n}from"./chunks/framework.DhcZWzV3.js";const c=JSON.parse('{"title":"13 客户端检测","description":"","frontmatter":{},"headers":[],"relativePath":"learn/JavaScript高级程序设计/13-客户端检测.md","filePath":"learn/JavaScript高级程序设计/13-客户端检测.md","lastUpdated":1655882254000}'),l={name:"learn/JavaScript高级程序设计/13-客户端检测.md"},e=n(`<h1 id="_13-客户端检测" tabindex="-1">13 客户端检测 <a class="header-anchor" href="#_13-客户端检测" aria-label="Permalink to &quot;13 客户端检测&quot;">​</a></h1><ul><li>使用能力检测</li><li>用户代理检测的历史</li><li>软件与硬件检测</li><li>检测策略</li></ul><p>现实当中，浏览器之间的差异和莫名其妙的行为，让客户端检测变成一 种补救措施，而且也成为了开发策略的重要一环。如今，浏览器之间的差异相对 IE 大溃败以前已经好很多了，但浏览器间的不一致性依旧是 Web 开发中的常见主题。</p><p>要检测当前的浏览器有很多方法，每一种都有各自的长处和不足。问题的关键在于知道客户端检测 应该是解决问题的最后一个举措。任何时候，只要有更普适的方案可选，都应该毫不犹豫地选择。首先 要设计最常用的方案，然后再考虑为特定的浏览器进行补救。</p><h2 id="_13-1-能力检测" tabindex="-1">13.1 能力检测 <a class="header-anchor" href="#_13-1-能力检测" aria-label="Permalink to &quot;13.1 能力检测&quot;">​</a></h2><p>能力检测(又称特性检测)即在 JavaScript 运行时中使用一套简单的检测逻辑，测试浏览器是否支 持某种特性。这种方式不要求事先知道特定浏览器的信息，只需检测自己关心的能力是否存在即可。</p><p>能力检测的关键是理解两个重要概念。首先，如前所述，应该先检测最常用的方式。在前面的例子 中就是先检测 document.getElementById()再检测 document.all。测试最常用的方案可以优化代 码执行，这是因为在多数情况下都可以避免无谓检测。</p><h3 id="_13-1-1-安全能力检测" tabindex="-1">13.1.1 安全能力检测 <a class="header-anchor" href="#_13-1-1-安全能力检测" aria-label="Permalink to &quot;13.1.1 安全能力检测&quot;">​</a></h3><p>能力检测最有效的场景是检测能力是否存在的同时，验证其是否能够展现出预期的行为。 要深入了解JavaScript能力检测，推荐阅读PeterMichaux的文章“FeatureDetection— State of the Art Browser Scripting”。</p><h3 id="_13-1-2-基于能力检测进行浏览器分析" tabindex="-1">13.1.2 基于能力检测进行浏览器分析 <a class="header-anchor" href="#_13-1-2-基于能力检测进行浏览器分析" aria-label="Permalink to &quot;13.1.2 基于能力检测进行浏览器分析&quot;">​</a></h3><p>虽然可能有人觉得能力检测类似于黑科技，但恰当地使用能力检测可以精准地分析运行代码的浏览 器。使用能力检测而非用户代理检测的优点在于，伪造用户代理字符串很简单，而伪造能够欺骗能力检测的浏览器特性却很难。</p><h4 id="_1-检测特性" tabindex="-1">1. 检测特性 <a class="header-anchor" href="#_1-检测特性" aria-label="Permalink to &quot;1. 检测特性&quot;">​</a></h4><p>可以按照能力将浏览器归类。如果你的应用程序需要使用特定的浏览器能力，那么最好集中检测所有能力，而不是等到用的时候再重复检测。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 检测浏览器是否支持 Netscape 式的插件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hasNSPlugins </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(navigator.plugins </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> navigator.plugins.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 检测浏览器是否具有 DOM Level 1 能力</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hasDOM1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(document.getElementById </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.createElement </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.getElementsByTagName);</span></span></code></pre></div><p>这个例子完成了两项检测:一项是确定浏览器是否支持 Netscape 式的插件，另一项是检测浏览器 是否具有 DOM Level 1 能力。保存在变量中的布尔值可以用在后面的条件语句中，这样比重复检测省事多了。</p><h4 id="_2-检测浏览器" tabindex="-1">2. 检测浏览器 <a class="header-anchor" href="#_2-检测浏览器" aria-label="Permalink to &quot;2. 检测浏览器&quot;">​</a></h4><p>可以根据对浏览器特性的检测并与已知特性对比，确认用户使用的是什么浏览器。这样可以获得比 用户代码嗅探(稍后讨论)更准确的结果。但未来的浏览器版本可能不适用于这套方案。</p><p>下面来看一个例子，根据不同浏览器独有的行为推断出浏览器的身份。这里故意没有使用 <code>navigator.userAgent</code> 属性。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BrowserDetector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 测试条件编译</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // IE6~10 支持</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.isIE_Gte6Lte10 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /*@cc_on!@*/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 测试documentMode</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // IE7~11 支持</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.isIE_Gte7Lte11 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.documentMode;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 测试 StyleMedia 构造函数</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Edge 20 及以上版本支持 </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.isEdge_Gte20 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.StyleMedia;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 测试Firefox专有扩展安装API</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 所有版本的 Firefox 都支持</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.isFirefox_Gte1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> InstallTrigger </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;undefined&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 测试 chrome 对象及其 webstore 属性</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Opera的某些版本有window.chrome，但没有window.chrome.webstore</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 所有版本的 Chrome 都支持</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.isChrome_Gte1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.chrome </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.chrome.webstore;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Safari 早期版本会给构造函数的标签符追加&quot;Constructor&quot;字样，如:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // window.Element.toString(); // [object ElementConstructor]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Safari 3~9.1 支持</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.isSafari_Gte3Lte9_1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">constructor</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(window.Element);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 推送通知 API 暴露在 window 对象上</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 使用默认参数值以避免对undefined调用toString() </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Safari 7.1 及以上版本支持 </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.isSafari_Gte7_1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      (({</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">pushNotification</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      pushNotification.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;[object SafariRemoteNotification]&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      )(window.safari);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 测试 addons 属性</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Opera 20 及以上版本支持</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.isOpera_Gte20 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.opr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.opr.addons;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  isIE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.isIE_Gte6Lte10 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.isIE_Gte7Lte11; }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  isEdge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.isEdge_Gte20 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isIE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  isFirefox</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.isFirefox_Gte1; }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  isChrome</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.isChrome_Gte1; }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  isSafari</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.isSafari_Gte3Lte9_1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.isSafari_Gte7_1; }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  isOpera</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.isOpera_Gte20; }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>这个类暴露的通用浏览器检测方法使用了检测浏览器范围的能力测试。随着浏览器的变迁及发展， 可以不断调整底层检测逻辑，但主要的 API 可以保持不变。</p><h4 id="_3-能力检测的局限" tabindex="-1">3. 能力检测的局限 <a class="header-anchor" href="#_3-能力检测的局限" aria-label="Permalink to &quot;3. 能力检测的局限&quot;">​</a></h4><p>通过检测一种或一组能力，并不总能确定使用的是哪种浏览器。以下“浏览器检测”代码(或其他 类似代码)经常出现在很多网站中，但都没有正确使用能力检测。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 不要这样做!不够特殊</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isFirefox </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(navigator.vendor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> navigator.vendorSub);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 不要这样做!假设太多</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isIE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(document.all </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.uniqueID);</span></span></code></pre></div><p>这是错误使用能力检测的典型示例。过去，Firefox 可以通过 <code>navigator.vendor</code> 和 <code>navigator.vendorSub</code> 来检测，但后来 Safari 也实现了同样的属性，于是这段代码就会产生误报。为确定 IE， 这段代码检测了 document.all 和 document.uniqueID。这是假设 IE 将来的版本中还会继续存在这 两个属性，而且其他浏览器也不会实现它们。不过这两个检测都使用双重否定操作符来产生布尔值（这样可以生成便于存储和访问的结果)。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>能力检测最适合用于决定下一步该怎么做，而不一定能够作为辨识浏览器的标志。</p></div><h2 id="_13-2-用户代理检测" tabindex="-1">13.2 用户代理检测 <a class="header-anchor" href="#_13-2-用户代理检测" aria-label="Permalink to &quot;13.2 用户代理检测&quot;">​</a></h2><p>用户代理检测通过浏览器的用户代理字符串确定使用的是什么浏览器。用户代理字符串包含在每个 HTTP 请求的头部，在 JavaScript 中可以通过 navigator.userAgent 访问。在服务器端，常见的做法是根据接收到的用户代理字符串确定浏览器并执行相应操作。而在客户端，用户代理检测被认为是不可靠的，只应该在没有其他选项时再考虑。 用户代理字符串最受争议的地方就是，在很长一段时间里，浏览器都通过在用户代理字符串包含 错误或误导性信息来欺骗服务器。要理解背后的原因，必须回顾一下自 Web 出现之后用户代理字符串的历史。</p><h3 id="_13-2-1-用户代理的历史" tabindex="-1">13.2.1 用户代理的历史 <a class="header-anchor" href="#_13-2-1-用户代理的历史" aria-label="Permalink to &quot;13.2.1 用户代理的历史&quot;">​</a></h3><p>HTTP 规范(1.0 和 1.1)要求浏览器应该向服务器发送包含浏览器名称和版本信息的简短字符串。RFC 2616(HTTP 1.1)是这样描述用户代理字符串的:</p><p>产品标记用于通过软件名称和版本来标识通信产品的身份。多数使用产品标记的字段也允许列出属于应用主要部分的子产品，以空格分隔。按照约定，产品按照标识应用重要程度的先后顺序列出。</p><p>这个规范进一步要求用户代理字符串应该是“标记/版本”形式的产品列表。但现实当中的用户代理字符串远没有那么简单。</p><ol><li>早期浏览器</li></ol><p>美国国家超级计算应用中心(NCSA，National Center for Supercomputing Applications)发布于 1993 年的 Mosaic 是早期 Web 浏览器的代表，其用户代理字符串相当简单，类似于: <code>Mosaic/0.9</code></p><p>斜杠前是产品名称，斜杠前是产品名称。</p><p>在网景公司准备开发浏览器时，代号确定为“Mozilla”(Mosaic Killer 的简写)。第一个公开发行版 Netscape Navigator 2 的用户代理字符串是这样的: <code>Mozilla/Version [Language] (Platform; Encryption)</code></p><p>网景公司遵守了将产品名称和版本作为用户代理字符串的规定，但又在后面添加了如下信息。</p><ul><li>Language:语言代码，表示浏览器的目标使用语言。</li><li>Platform:表示浏览器所在的操作系统和/或平台。</li><li>Encryption:包含的安全加密类型，可能的值是 U(128 位加密)、I(40 位加密)和 N(无加密)。</li></ul><ol start="2"><li>Netscape Navigator 3 和 IE3</li></ol><p>1996 年，<code>Netscape Navigator 3</code> 发布之后超过 <code>Mosaic</code> 成为最受欢迎的浏览器。其用户代理字符串也 发生了一些小变化，删除了语言信息，并将操作系统或系统 CPU 信息(OS-or-CPU description)等列为可选信息。</p><p><code>Mozilla/Version (Platform; Encryption [; OS-or-CPU description])</code></p><p>运行在 Windows 系统上的 Netscape Navigator 3 的典型用户代理字符串如下</p><p><code>Mozilla/3.0 (Win95; U)</code></p><p>IE 就在用户代理字符串中添加了兼容 <code>Netscape</code> 用户代理字符串的内容</p><p><code>Mozilla/2.0 (compatible; MSIE Version; Operating System)</code></p><p>Windows 95 平台上的 IE3.02 的用户代理字符串如下</p><p><code>Mozilla/2.0 (compatible; MSIE 3.02; Windows 95)</code></p><p>当时的大多数浏览器检测程序都只看用户代理字符串中的产品名称，因此 IE 成功地将自己伪装成 了 <code>Mozilla</code>，也就是 <code>Netscape Navigator</code>。这个做法引发了一些争议，因为它违反了浏览器标识的初衷。 另外，真正的浏览器版本也跑到了字符串中间。</p><ol><li>Netscape Communicator 4 和 IE4~8</li></ol><p>Netscape 在这个版本中仍然沿用了上一个版本的格式:</p><p><code>Mozilla/Version (Platform; Encryption [; OS-or-CPU description])</code></p><p><code>Mozilla/4.0 (Win98; I)</code></p><p><code>Mozilla/4.79 (Win98; I)</code></p><p><code>Mozilla/4.0 (compatible; MSIE Version; Operating System)</code></p><p><code>Mozilla/4.0 (compatible; MSIE 4.0; Windows 98)</code></p><p>直到 IE7，Mozilla 的版本号就没有变过，比如:</p><p><code>Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1)</code></p><p>IE8 在用户代理字符串中添加了额外的标识“Trident”，就是浏览器渲染引擎的代号。格式变成:</p><p><code>Mozilla/4.0 (compatible; MSIE Version; Operating System; Trident/TridentVersion)</code></p><p><code>Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0)</code></p><p>这个新增的“Trident”是为了让开发者知道什么时候 IE8 运行兼容模式。在兼容模式下，MSIE 的 版本会变成 7，但 Trident 的版本不变:</p><p><code>Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0)</code></p><p>IE9 稍微升级了一下用户代理字符串的格式。Mozilla 的版本增加到了 5.0，Trident 的版本号也增加 到了 5.0。IE9 的默认用户代理字符串是这样的:</p><p><code>Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)</code></p><p>所有这些改变都是为了让之前的用户代理检测脚本正常运作，同时还能为新脚本提供额外的信息。</p><ol start="4"><li>Gecko</li></ol><p>Gecko 渲染引擎是 Firefox 的核心。Gecko 最初是作为通用 Mozilla 浏览器(即后来的 Netscape 6)的 一部分开发的。有一个针对 Netscape 6 的用户代理字符串规范，规定了未来的版本应该如何构造这个字符串。新的格式与之前一直沿用到 4.x 版的格式有了很大出入:</p><p><code>Mozilla/MozillaVersion (Platform; Encryption; OS-or-CPU; Language; PrereleaseVersion)Gecko/GeckoVersion ApplicationProduct/ApplicationProductVersion</code></p><ul><li>MozillaVersion Mozilla 版本</li><li>Platform 浏览器所在的平台。可能的值包括 Windows、Mac 和 X11(UNIX X-Windows)</li><li>Encryption 加密能力:U 表示 128 位，I 表示 40 位，N 表示无加密</li><li>OS-or-CPU 浏览器所在的操作系统或计算机处理器类型。如果是 Windows 平台， 则这里是 Windows 的版本(如 WinNT、Win95)。如果是 Mac 平台，则 这里是 CPU 类型(如 68k、PPC for PowerPC 或 MacIntel)。如果是 X11 平台，则这里是通过 uname -sm 命名得到的 UNIX 操作系统名</li><li>Language 浏览器的目标使用语言</li><li>Prerelease Version 最初的设想是 Mozilla 预发布版的版本号，现在表示 Gecko 引擎的版本号</li><li>GeckoVersion 以 yyyymmdd 格式的日期表示的 Gecko 渲染引擎的版本</li><li>ApplicationProduct 使用 Gecko 的产品名称。可能是 Netscape、Firefox 等</li><li>ApplicationProductVersion ApplicationProduct 的版本，区别于 MozillaVersion 和 GeckoVersion</li></ul><p>...</p><ol start="5"><li>WebKit 2003 年，苹果宣布将发布自己的浏览器 Safari。Safari 的渲染引擎叫 WebKit，是基于 Linux 平台浏览器 Konqueror 使用的渲染引擎 KHTML 开发的。几年后，WebKit 又拆分出自己的开源项目，专注于渲染引擎开发。</li></ol><p>这个新浏览器和渲染引擎的开发者也面临与当初 IE3.0 时代同样的问题:怎样才能保证浏览器不被 排除在流行的站点之外。答案就是在用户代理字符串中添加足够多的信息，让网站知道这个浏览器与其 他浏览器是兼容的。于是 Safari 就有了下面这样的用户代理字符串:</p><p><code>Mozilla/5.0 (Platform; Encryption; OS-or-CPU; Language) AppleWebKit/AppleWebKitVersion (KHTML, like Gecko) Safari/SafariVersion</code></p><p>下面是一个实际的例子:</p><p><code>Mozilla/5.0 (Macintosh; U; PPC Mac OS X; en) AppleWebKit/124 (KHTML, like Gecko) Safari/125.1</code></p><p>Safari 的用户代理字符串在第 3 版时有所改进。下面的版本标记现在用来表示 Safari 实际的版本号:</p><p><code>Mozilla/5.0 (Macintosh; U; PPC Mac OS X; en) AppleWebKit/522.15.5 (KHTML, like Gecko) Version/3.0.3 Safari/522.15.5</code></p><p>注意这个变化只针对 Safari 而不包括 WebKit。因此，其他基于 WebKit 的浏览器可能不会有这个变化。一般来说，与 Gecko 一样，通常识别是不是 WebKit 比识别是不是 Safari 更重要。</p><ol start="6"><li>Konqueror</li></ol><p>Konqueror 是与 KDE Linux 桌面环境打包发布的浏览器，基于开源渲染引擎 KHTML。虽然只有 Linux 平台的版本，Konqueror 的用户却不少。为实现最大化兼容，Konqueror 决定采用 Internet Explore 的用户代理字符串格式:.</p><p><code>Mozilla/5.0 (compatible; Konqueror/Version; OS-or-CPU)</code></p><p>不过，Konqueror 3.2 为了与 WebKit 就标识为 KHTML 保持一致，也对格式做了一点修改:</p><p><code>Mozilla/5.0 (compatible; Konqueror/Version; OS-or-CPU) KHTML/KHTMLVersion (like Gecko)</code></p><p><code>Mozilla/5.0 (compatible; Konqueror/3.5; SunOS) KHTML/3.5.0 (like Gecko)</code></p><p>Konqueror 和 KHTML 的版本号通常是一致的，有时候也只有子版本号不同。比如 Konqueror 是 3.5， 而 KHTML 是 3.5.1。</p><ol start="7"><li>Chrome 谷歌的 Chrome 浏览器使用 Blink 作为渲染引擎，使用 V8 作为 JavaScript 引擎。Chrome 的用户代理 字符串包含所有 WebKit 的信息，另外又加上了 Chrome 及其版本的信息。其格式如下所示:</li></ol><p><code>Mozilla/5.0 (Platform; Encryption; OS-or-CPU; Language) AppleWebKit/AppleWebKitVersion (KHTML, like Gecko) Chrome/ChromeVersion Safari/SafariVersion</code></p><p>以下是 Chrome 7 完整的用户代理字符串:</p><p><code>Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/534.7 (KHTML, like Gecko) Chrome/7.0.517.44 Safari/534.7</code></p><p>其中的 Safari 版本和 WebKit 版本有可能始终保持一致，但也不能肯定。</p><ol start="8"><li>Opera</li></ol><p>在用户代理字符串方面引发争议最大的一个浏览器就是 Opera。Opera 默认的用户代理字符串是所 有现代浏览器中最符合逻辑的，因为它正确标识了自己和版本。在 Opera 8 之前，其用户代理字符串都是这个格式:</p><p><code>Opera/Version (OS-or-CPU; Encryption) [Language]</code></p><p>默认情况下，Opera 会返回这个简单的用户代理字符串。这是唯一一个使用产品名称和版本完全标 识自身的主流浏览器。不过，与其他浏览器一样，Opera 也遇到了使用这种字符串的问题。虽然从技术 角度看这是正确的，但网上已经有了很多浏览器检测代码只考虑 Mozilla 这个产品名称。还有不少代码 专门针对 IE 或 Gecko。为了不让这些检测代码判断错误，Opera 坚持使用唯一标识自身的字符串。</p><p>从 Opera 9 开始，Opera 也采用了两个策略改变自己的字符串。一是把自己标识为别的浏览器，如 7 Firefox 或 IE。这时候的字符串跟 Firefox 和 IE 的一样，只不过末尾会多一个&quot;Opera&quot;及其版本号。比如:</p><p><code>Mozilla/5.0 (Windows NT 5.1; U; en; rv:1.8.1) Gecko/20061208 Firefox/2.0.0 Opera 9.50</code></p><p><code>Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; en) Opera 9.50</code></p><p>..</p><ol start="9"><li>iOS 与 Android</li></ol><p>iOS 和 Android 移动操作系统上默认的浏览器都是基于 WebKit 的，因此具有与相应桌面浏览器一样 的用户代理字符串。iOS 设备遵循以下基本格式:</p><p><code>Mozilla/5.0 (Platform; Encryption; OS-or-CPU like Mac OS X; Language) AppleWebKit/AppleWebKitVersion (KHTML, like Gecko) Version/BrowserVersion Mobile/MobileVersion Safari/SafariVersion</code></p><p>注意其中用于辅助判断 Mac 操作系统的&quot;like Mac OS X&quot;和&quot;Mobile&quot;相关的标识。这里的 Mobile 标识除了说明这是移动 WebKit 之外并没有什么用。平台可能是&quot;iPhone&quot;、&quot;iPod&quot;或&quot;iPad&quot;，因设备而异。例如:</p><p><code>Mozilla/5.0 (iPhone; U; CPU iPhone OS 3_0 like Mac OS X; en-us) AppleWebKit/528.18 (KHTML, like Gecko) Version/4.0 Mobile/7A341 Safari/528.16</code></p><p>注意在 iOS 3 以前，操作系统的版本号不会出现在用户代理字符串中。</p><p>默认的 Android 浏览器通常与 iOS 上的浏览器格式相同，只是没有 Mobile 后面的版本号(&quot;Mobile&quot; 标识还有)。例如:</p><p><code>Mozilla/5.0 (Linux; U; Android 2.2; en-us; Nexus One Build/FRF91) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1</code></p><p>这个用户代理字符串是谷歌 Nexus One 手机上的默认浏览器的。不过，其他 Android 设备上的浏览 器也遵循相同的模式。</p><h3 id="_13-2-2-浏览器分析" tabindex="-1">13.2.2 浏览器分析 <a class="header-anchor" href="#_13-2-2-浏览器分析" aria-label="Permalink to &quot;13.2.2 浏览器分析&quot;">​</a></h3><p>想要知道自己代码运行在什么浏览器上，大部分开发者会分析 window.navigator.userAgent 返回的字符串值。所有浏览器都会提供这个值，如果相信这些返回值并基于给定的一组浏览器检测这个 字符串，最终会得到关于浏览器和操作系统的比较精确的结果。</p><p>相比于能力检测，用户代理检测还是有一定优势的。能力检测可以保证脚本不必理会浏览器而正常 执行。现代浏览器用户代理字符串的过去、现在和未来格式都是有章可循的，我们能够利用它们准确识 别浏览器。</p><ol><li>伪造用户代理</li></ol><p>通过检测用户代理来识别浏览器并不是完美的方式，毕竟这个字符串是可以造假的。只不过实现 window.navigator 对象的浏览器(即所有现代浏览器)都会提供 userAgent 这个只读属性。因此， 简单地给这个属性设置其他值不会有效。</p><p>不过，通过简单的办法可以绕过这个限制。比如，有些浏览器提供伪私有的__defineGetter__方法，利用它可以篡改用户代理字符串:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(window.navigator.userAgent);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) 4 Chrome/65.0.3325.181 Safari/537.36</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.navigator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">__defineGetter__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;userAgent&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;foobar&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(window.navigator.userAgent);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// foobar</span></span></code></pre></div><p>对付这种造假是一件吃力不讨好的事。检测用户代理是否以这种方式被篡改过是可能的，但总体来 看还是一场猫捉老鼠的游戏。与其劳心费力检测造假，不如更好地专注于浏览器识别。如果相信浏览器返回的用户代理字符串，那就可以用它来判断浏览器。如果怀疑脚本或浏览器可能篡改这个值，那最好还是使用能力检测。</p><ol start="2"><li>分析浏览器</li></ol><p>通过解析浏览器返回的用户代理字符串，可以极其准确地推断出下列相关的环境信息:</p><ul><li>浏览器</li><li>浏览器版本</li><li>浏览器渲染引擎</li><li>设备类型(桌面/移动) 9  设备生产商</li><li>设备型号</li><li>操作系统</li><li>操作系统版本</li></ul><p>当然，新浏览器、新操作系统和新硬件设备随时可能出现，其中很多可能有着类似但并不相同的用户代理字符串。因此，用户代理解析程序需要与时俱进，频繁更新，以免落伍。自己手写的解析程序如 果不及时更新或修订，很容易就过时了。本书上一版写过一个用户代理解析程序，但这一版并不推荐读 者自己从头再写一个。相反，这里推荐一些 GitHub 上维护比较频繁的第三方用户代理解析程序:</p><ul><li>Bowser</li><li>UAParser.js</li><li>Platform.js</li><li>CURRENT-DEVICE</li><li>Google Closure</li><li>Mootools</li></ul><h2 id="_13-3-软件与硬件检测" tabindex="-1">13.3 软件与硬件检测 <a class="header-anchor" href="#_13-3-软件与硬件检测" aria-label="Permalink to &quot;13.3 软件与硬件检测&quot;">​</a></h2><p>现代浏览器提供了一组与页面执行环境相关的信息，包括浏览器、操作系统、硬件和周边设备信息。 这些属性可以通过暴露在 window.navigator 上的一组 API 获得。不过，这些 API 的跨浏览器支持还 不够好，远未达到标准化的程度。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>强烈建议在使用这些 API 之前先检测它们是否存在，因为其中多数都不是强制性的，且很多浏览器没有支持。另外，本节介绍的特性有时候不一定可靠。</p></div><h3 id="_13-3-1-识别浏览器与操作系统" tabindex="-1">13.3.1 识别浏览器与操作系统 <a class="header-anchor" href="#_13-3-1-识别浏览器与操作系统" aria-label="Permalink to &quot;13.3.1 识别浏览器与操作系统&quot;">​</a></h3><p>特性检测和用户代理字符串解析是当前常用的两种识别浏览器的方式。而 <code>navigator</code> 和 <code>screen</code> 对象也提供了关于页面所在软件环境的信息。</p><ol><li>navigator.oscpu (Deprecated)</li></ol><p>navigator.oscpu 属性是一个字符串，通常对应用户代理字符串中操作系统/系统架构相关信息。</p><ol start="2"><li>navigator.vendor</li></ol><p>navigator.vendor 属性是一个字符串，通常包含浏览器开发商信息。返回这个字符串是浏览器 navigator 兼容模式的一个功能。</p><ol start="3"><li>navigator.platform</li></ol><p>navigator.platform 属性是一个字符串，通常表示浏览器所在的操作系统。</p><ol start="4"><li>screen.colorDepth 和 screen.pixelDepth</li></ol><p><code>screen.colorDepth</code> 和 <code>screen.pixelDepth</code> 返回一样的值，即显示器每像素颜色的位深。根据 CSS 对象模型(CSSOM)规范:</p><p>screen.colorDepth 和 screen.pixelDepth 属性应该返回输出设备中每像素用于显示颜色的位数，不包含 alpha 通道。</p><ol start="5"><li>screen.orientation</li></ol><p><code>screen.orientation</code> 属性返回一个 <code>ScreenOrientation</code> 对象，其中包含 Screen Orientation API 定义的屏幕信息。这里面最有意思的属性是 <code>angle</code> 和 <code>type</code>，前者返回相对于默认状态下屏幕的角度，后者返回以下 4 种枚举值之一:</p><ul><li>portrait-primary</li><li>portrait-secondary</li><li>landscape-primary</li><li>landscape-secondary</li></ul><h3 id="_13-3-2-浏览器元数据" tabindex="-1">13.3.2 浏览器元数据 <a class="header-anchor" href="#_13-3-2-浏览器元数据" aria-label="Permalink to &quot;13.3.2 浏览器元数据&quot;">​</a></h3><p>navigator 对象暴露出一些 API，可以提供浏览器和操作系统的状态信息。</p><ol><li>Geolocation API</li></ol><p><code>navigator.geolocation</code> 属性暴露了 Geolocation API，可以让浏览器脚本感知当前设备的地理位 置。这个 API 只在安全执行环境(通过 HTTPS 获取的脚本)中可用。</p><p>这个 API 可以查询宿主系统并尽可能精确地返回设备的位置信息。根据宿主系统的硬件和配置，返回结果的精度可能不一样。手机 GPS 的坐标系统可能具有极高的精度，而 IP 地址的精度就要差很多。根据 Geolocation API 规范:</p><p>地理位置信息的主要来源是 GPS 和 IP 地址、射频识别(RFID)、Wi-Fi 及蓝牙 Mac 地址、GSM/CDMA 蜂窝 ID 以及用户输入等信息。</p><p>要获取浏览器当前的位置，可以使用 getCurrentPosition()方法。这个方法返回一个 Coordinates 对象，其中包含的信息不一定完全依赖宿主系统的能力:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// getCurrentPosition()会以 position 对象为参数调用传入的回调函数 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">navigator.geolocation.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getCurrentPosition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">position</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> position);</span></span></code></pre></div><p>这个 <code>position</code> 对象中有一个表示查询时间的时间戳，以及包含坐标信息的 <code>Coordinates</code> 对象:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p.timestamp); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1525364883361</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p.coords);    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Coordinates {...}</span></span></code></pre></div><p>Coordinates 对象中包含标准格式的经度和纬度，以及以米为单位的精度。精度同样以确定设备位置的机制来判定。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p.coords.latitude, p.coords.longitude); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 37.4854409, -122.2325506 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p.coords.accuracy); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 58</span></span></code></pre></div><p><code>Coordinates</code> 对象包含一个 <code>altitude</code>(海拔高度)属性，是相对于 1984 世界大地坐标系(World Geodetic System，1984)地球表面的以米为单位的距离。此外也有一个 <code>altitudeAccuracy</code> 属性，这个精度值单位也是米。为了取得 <code>Coordinates</code> 中包含的这些信息，当前设备必须具备相应的能力(比 如 GPS 或高度计)。很多设备因为没有能力测量高度，所以这两个值经常有一个或两个是空的。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p.coords.altitude);          </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// -8.800000190734863</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p.coords.altitudeAccuracy);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 200</span></span></code></pre></div><p><code>Coordinates</code> 对象包含一个 <code>speed</code> 属性，表示设备每秒移动的速度。还有一个 <code>heading</code>(朝向) 属性，表示相对于正北方向移动的角度(0 ≤ heading &lt; 360)。为获取这些信息，当前设备必须具备相 应的能力(比如加速计或指南针)。很多设备因为没有能力测量高度，所以这两个值经常有一个是空的， 或者两个都是空的。</p><p>获取浏览器地理位置并不能保证成功。因此 <code>getCurrentPosition()</code> 方法也接收失败回调函数作 为第二个参数，这个函数会收到一个 <code>PositionError</code> 对象。在失败的情况下，PositionError 对象 中会包含一个 code 属性和一个 message 属性，后者包含对错误的简短描述。code 属性是一个整数， 表示以下 3 种错误。</p><ul><li>PERMISSION_DENIED: 浏览器未被允许访问设备位置。页面第一次尝试访问 Geolocation API 时，浏览器会弹出确认对话框取得用户授权(每个域分别获取)。如果返回了这个错误码，则要 么是用户不同意授权，要么是在不安全的环境下访问了 Geolocation API。message 属性还会提 供额外信息。</li><li>POSITION_UNAVAILABLE: 系统无法返回任何位置信息。这个错误码可能代表各种失败原因， 但相对来说并不常见，因为只要设备能上网，就至少可以根据 IP 地址返回一个低精度的坐标。</li><li>TIMEOUT: 系统不能在超时时间内返回位置信息。</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 浏览器会弹出确认对话框请用户允许访问Geolocation API </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这个例子显示了用户拒绝之后的结果 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">navigator.geolocation.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getCurrentPosition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e.code);     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e.message);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// User denied Geolocation</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这个例子展示了在不安全的上下文中执行代码的结果 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">navigator.geolocation.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getCurrentPosition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e.code);     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e.message);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Only secure origins are allowed</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>Geolocation API 位置请求可以使用 PositionOptions 对象来配置，作为第三个参数提供。这个对 象支持以下 3 个属性。</p><ul><li>enableHighAccuracy: 布尔值，true 表示返回的值应该尽量精确，默认值为 false。默认情 况下，设备通常会选择最快、最省电的方式返回坐标。这通常意味着返回的是不够精确的坐标。 9 比如，在移动设备上，默认位置查询通常只会采用 Wi-Fi 和蜂窝网络的定位信息。而在 <code>enableHighAccuracy</code> 为 <code>true</code> 的情况下，则会使用设备的 GPS 确定设备位置，并返回这些值 的混合结果。使用 GPS 会更耗时、耗电，因此在使用 <code>enableHighAccuracy</code> 配置时要仔细权衡一下。</li><li>timeout:毫秒，表示在以 TIMEOUT 状态调用错误回调函数之前等待的最长时间。默认值是 0xFFFFFFFF(232 – 1)。0 表示完全跳过系统调用而立即以 TIMEOUT 调用错误回调函数。</li><li>maximumAge:毫秒，表示返回坐标的最长有效期，默认值为 0。因为查询设备位置会消耗资源， 所以系统通常会缓存坐标并在下次返回缓存的值(遵从位置缓存失效策略)。系统会计算缓存期， 如果 Geolocation API 请求的配置要求比缓存的结果更新，则系统会重新查询并返回值。0 表示强 制系统忽略缓存的值，每次都重新查询。而 Infinity 会阻止系统重新查询，只会返回缓存的值。JavaScript 可以通过检查 Position 对象的 timestamp 属性值是否重复来判断返回的是不 是缓存值。</li></ul><ol start="2"><li>Connection State 和 NetworkInformation API</li></ol><p>浏览器会跟踪网络连接状态并以两种方式暴露这些信息:连接事件和 <code>navigator.onLine</code> 属性。 在设备连接到网络时，浏览器会记录这个事实并在 window 对象上触发 <code>online</code> 事件。相应地，当设备断开网络连接后，浏览器会在 window 对象上触发 <code>offline</code> 事件。任何时候，都可以通过 <code>navigator.onLine</code> 属性来确定浏览器的联网状态。这个属性返回一个布尔值，表示浏览器是否联网。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> connectionStateChange</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(navigator.onLine);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;online&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, connectionStateChange); </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;offline&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, connectionStateChange);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 设备联网时: </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 设备断网时: </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// false</span></span></code></pre></div><p>当然，到底怎么才算联网取决于浏览器与系统实现。有些浏览器可能会认为只要连接到局域网就算 “在线”，而不管是否真正接入了互联网。</p><p>navigator 对象还暴露了 NetworkInformation API，可以通过 navigator.connection 属性使用。 这个 API 提供了一些只读属性，并为连接属性变化事件处理程序定义了一个事件对象。</p><p>以下是 NetworkInformation API 暴露的属性。</p><ul><li><p>downlink:整数，表示当前设备的带宽(以 Mbit/s 为单位)，舍入到最接近的 25kbit/s。这个值可能会根据历史网络吞吐量计算，也可能根据连接技术的能力来计算。</p></li><li><p>downlinkMax:整数，表示当前设备最大的下行带宽(以 Mbit/s 为单位)，根据网络的第一跳来确定。因为第一跳不一定反映端到端的网络速度，所以这个值只能用作粗略的上限值。</p></li><li><p>effectiveType:字符串枚举值，表示连接速度和质量。这些值对应不同的蜂窝数据网络连接技术，但也用于分类无线网络。这个值有以下 4 种可能。</p><ul><li><p>slow-2g</p><p>往返时间 &gt; 2000ms 下行带宽 &lt; 50kbit/s</p></li><li><p>2g</p><p>2000ms &gt; 往返时间 ≥ 1400ms 70kbit/s &gt; 下行带宽 ≥ 50kbit/s</p></li><li><p>3g</p><p>1400ms &gt; 往返时间 ≥ 270ms 700kbit/s &gt; 下行带宽 ≥ 70kbit/s</p></li><li><p>4g</p><p>270ms &gt; 往返时间 ≥ 0ms 下行带宽 ≥ 700kbit/s</p></li></ul></li><li><p>rtt: 毫秒，表示当前网络实际的往返时间，舍入为最接近的 25 毫秒。这个值可能根据历史网络吞吐量计算，也可能根据连接技术的能力来计算。</p></li><li><p>type:字符串枚举值，表示网络连接技术。这个值可能为下列值之一。</p><ul><li>bluetooth:蓝牙。</li><li>cellular:蜂窝。</li><li>ethernet:以太网。</li><li>none:无网络连接。相当于 navigator.onLine === false。</li><li>mixed:多种网络混合。</li><li>other:其他。</li><li>unknown:不确定。</li><li>wifi:Wi-Fi。</li><li>wimax:WiMAX。</li></ul></li><li><p>saveData:布尔值，表示用户设备是否启用了“节流”(reduced data)模式。</p></li><li><p>onchange:事件处理程序，会在任何连接状态变化时激发一个 change 事件。可以通过 <code>navigator.connection.addEventListener(&#39;change&#39;,changeHandler)</code> 或 <code>navigator.connection. onchange = changeHandler</code> 等方式使用。</p></li></ul><ol start="3"><li>Battery Status API</li></ol><p>浏览器可以访问设备电池及充电状态的信息。<code>navigator.getBattery()</code> 方法会返回一个期约实 例，解决为一个 <code>BatteryManager</code> 对象。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">navigator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getBattery</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(b));</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// BatteryManager { ... }</span></span></code></pre></div><p><code>BatteryManager</code> 包含 4 个只读属性，提供了设备电池的相关信息。</p><ul><li>charging:布尔值，表示设备当前是否正接入电源充电。如果设备没有电池，则返回 true。</li><li>chargingTime:整数，表示预计离电池充满还有多少秒。如果电池已充满或设备没有电池，则返回 0。</li><li>dischargingTime:整数，表示预计离电量耗尽还有多少秒。如果设备没有电池，则返回 Infinity。</li><li>level:浮点数，表示电量百分比。电量完全耗尽返回 0.0，电池充满返回 1.0。如果设备没有电池，则返回 1.0。</li></ul><p>这个 API 还提供了 4 个事件属性，可用于设置在相应的电池事件发生时调用的回调函数。可以通过</p><ul><li>onchargingchange</li><li>onchargingtimechange</li><li>ondischargingtimechange</li><li>onlevelchange</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">navigator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getBattery</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">battery</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 添加充电状态变化时的处理程序</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> chargingChangeHandler</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;chargingchange&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  battery.onchargingchange </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> chargingChangeHandler;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 或</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  battery.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;chargingchange&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, chargingChangeHandler);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 添加充电时间变化时的处理程序</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> chargingTimeChangeHandler</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;chargingtimechange&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  battery.onchargingtimechange </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> chargingTimeChangeHandler;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 或</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  battery.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;chargingtimechange&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, chargingTimeChangeHandler);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 添加放电时间变化时的处理程序</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> dischargingTimeChangeHandler</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;dischargingtimechange&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  battery.ondischargingtimechange </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dischargingTimeChangeHandler;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 或</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  battery.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;dischargingtimechange&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, dischargingTimeChangeHandler);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 添加电量百分比变化时的处理程序</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> levelChangeHandler</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;levelchange&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  battery.onlevelchange </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> levelChangeHandler;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 或</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  battery.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;levelchange&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, levelChangeHandler);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h3 id="_13-3-3-硬件" tabindex="-1">13.3.3 硬件 <a class="header-anchor" href="#_13-3-3-硬件" aria-label="Permalink to &quot;13.3.3 硬件&quot;">​</a></h3><p>浏览器检测硬件的能力相当有限。不过，<code>navigator</code> 对象还是通过一些属性提供了基本信息。</p><ol><li>处理器核心数</li></ol><p><code>navigator.hardwareConcurrency</code> 属性返回浏览器支持的逻辑处理器核心数量，包含表示核心数的一个整数值(如果核心数无法确定，这个值就是 1)。关键在于，这个值表示浏览器可以并行执行的 最大工作线程数量，不一定是实际的 CPU 核心数。</p><ol start="2"><li>设备内存大小</li></ol><p><code>navigator.deviceMemory</code> 属性返回设备大致的系统内存大小，包含单位为 GB 的浮点数(舍入为最接近的 2 的幂:512MB 返回 0.5，4GB 返回 4)。</p><ol start="3"><li>最大触点数</li></ol><p><code>navigator.maxTouchPoints</code> 属性返回触摸屏支持的最大关联触点数量，包含一个整数值。</p><h2 id="_13-4-小结" tabindex="-1">13.4 小结 <a class="header-anchor" href="#_13-4-小结" aria-label="Permalink to &quot;13.4 小结&quot;">​</a></h2><p>客户端检测是 JavaScript 中争议最多的话题之一。因为不同浏览器之间存在差异，所以经常需要根 据浏览器的能力来编写不同的代码。客户端检测有不少方式，但下面两种用得最多。</p><ul><li><p>能力检测， 在使用之前先测试浏览器的特定能力。例如，脚本可以在调用某个函数之前先检查 它是否存在。这种客户端检测方式可以让开发者不必考虑特定的浏览器或版本，而只需关注某 些能力是否存在。能力检测不能精确地反映特定的浏览器或版本。</p></li><li><p>用户代理检测， 通过用户代理字符串确定浏览器。用户代理字符串包含关于浏览器的很多信息， 通常包括浏览器、平台、操作系统和浏览器版本。用户代理字符串有一个相当长的发展史，很 多浏览器都试图欺骗网站相信自己是别的浏览器。用户代理检测也比较麻烦，特别是涉及 Opera 会在代理字符串中隐藏自己信息的时候。即使如此，用户代理字符串也可以用来确定浏览器使 用的渲染引擎以及平台，包括移动设备和游戏机。</p></li></ul><p>在选择客户端检测方法时，首选是使用能力检测。特殊能力检测要放在次要位置，作为决定代码逻 辑的参考。用户代理检测是最后一个选择，因为它过于依赖用户代理字符串。</p><p>浏览器也提供了一些软件和硬件相关的信息。这些信息通过 screen 和 navigator 对象暴露出来。 利用这些 API，可以获取关于操作系统、浏览器、硬件、设备位置、电池状态等方面的准确信息。</p>`,184),t=[e];function p(h,k,o,r,d,E){return a(),s("div",null,t)}const y=i(l,[["render",p]]);export{c as __pageData,y as default};
