import{_ as e,c as t,o as i,a4 as a}from"./chunks/framework.DhcZWzV3.js";const b=JSON.parse('{"title":"Chapter3: Working with Functions","description":"","frontmatter":{},"headers":[],"relativePath":"learn/Effective-JavaScript/Chapter3-Working-with-Functions.md","filePath":"learn/Effective-JavaScript/Chapter3-Working-with-Functions.md","lastUpdated":1656568053000}'),r={name:"learn/Effective-JavaScript/Chapter3-Working-with-Functions.md"},o=a('<h1 id="chapter3-working-with-functions" tabindex="-1">Chapter3: Working with Functions <a class="header-anchor" href="#chapter3-working-with-functions" aria-label="Permalink to &quot;Chapter3: Working with Functions&quot;">​</a></h1><h2 id="item-18-understand-the-difference-between-function-method-and-constructor-calls" tabindex="-1">Item 18: Understand the Difference between Function, Method, and Constructor Calls <a class="header-anchor" href="#item-18-understand-the-difference-between-function-method-and-constructor-calls" aria-label="Permalink to &quot;Item 18: Understand the Difference between Function, Method, and Constructor Calls&quot;">​</a></h2><h3 id="things-to-remember" tabindex="-1">Things to Remember <a class="header-anchor" href="#things-to-remember" aria-label="Permalink to &quot;Things to Remember&quot;">​</a></h3><ul><li>✦ Method calls provide the object in which the method property is looked up as their receiver.</li><li>✦ Function calls provide the global object (or undefined for strict func- tions) as their receiver. Calling methods with function call syntax is rarely useful.</li><li>✦ Constructors are called with new and receive a fresh object as their receiver.</li></ul><h2 id="item-19-get-comfortable-using-higher-order-functions" tabindex="-1">Item 19: Get Comfortable Using Higher-Order Functions <a class="header-anchor" href="#item-19-get-comfortable-using-higher-order-functions" aria-label="Permalink to &quot;Item 19: Get Comfortable Using Higher-Order Functions&quot;">​</a></h2><h3 id="things-to-remember-1" tabindex="-1">Things to Remember <a class="header-anchor" href="#things-to-remember-1" aria-label="Permalink to &quot;Things to Remember&quot;">​</a></h3><ul><li>✦ Higher-order functions are functions that take other functions as arguments or return functions as their result.</li><li>✦ Familiarize yourself with higher-order functions in existing libraries.</li><li>✦ Learn to detect common coding patterns that can be replaced by higher-order functions.</li></ul><h2 id="item-20-use-call-to-call-methods-with-a-custom-receiver" tabindex="-1">Item 20: Use call to Call Methods with a Custom Receiver <a class="header-anchor" href="#item-20-use-call-to-call-methods-with-a-custom-receiver" aria-label="Permalink to &quot;Item 20: Use call to Call Methods with a Custom Receiver&quot;">​</a></h2><h3 id="things-to-remember-2" tabindex="-1">Things to Remember <a class="header-anchor" href="#things-to-remember-2" aria-label="Permalink to &quot;Things to Remember&quot;">​</a></h3><ul><li>✦ Use the call method to call a function with a custom receiver.</li><li>✦ Use the call method for calling methods that may not exist on a given object.</li><li>✦ Use the call method for defining higher-order functions that allow clients to provide a receiver for the callback.</li></ul><h2 id="item-21-use-apply-to-call-functions-with-different-numbers-of-arguments" tabindex="-1">Item 21: Use apply to Call Functions with Different Numbers of Arguments <a class="header-anchor" href="#item-21-use-apply-to-call-functions-with-different-numbers-of-arguments" aria-label="Permalink to &quot;Item 21: Use apply to Call Functions with Different Numbers of Arguments&quot;">​</a></h2><h3 id="things-to-remember-3" tabindex="-1">Things to Remember <a class="header-anchor" href="#things-to-remember-3" aria-label="Permalink to &quot;Things to Remember&quot;">​</a></h3><ul><li>✦ Use the apply method to call variadic functions with a computed array of arguments.</li><li>✦ Use the first argument of apply to provide a receiver for variadic methods.</li></ul><h2 id="item-22-use-arguments-to-create-variadic-functions" tabindex="-1">Item 22: Use arguments to Create Variadic Functions <a class="header-anchor" href="#item-22-use-arguments-to-create-variadic-functions" aria-label="Permalink to &quot;Item 22: Use arguments to Create Variadic Functions&quot;">​</a></h2><h3 id="things-to-remember-4" tabindex="-1">Things to Remember <a class="header-anchor" href="#things-to-remember-4" aria-label="Permalink to &quot;Things to Remember&quot;">​</a></h3><ul><li>✦ Use the implicit arguments object to implement variable-arity functions.</li><li>✦ Consider providing additional fixed-arity versions of the variadic functions you provide so that your consumers don’t need to use the apply method.</li></ul><h2 id="item-23-never-modify-the-arguments-object" tabindex="-1">Item 23: Never Modify the arguments Object <a class="header-anchor" href="#item-23-never-modify-the-arguments-object" aria-label="Permalink to &quot;Item 23: Never Modify the arguments Object&quot;">​</a></h2><h3 id="things-to-remember-5" tabindex="-1">Things to Remember <a class="header-anchor" href="#things-to-remember-5" aria-label="Permalink to &quot;Things to Remember&quot;">​</a></h3><ul><li>✦ Never modify the arguments object.</li><li>✦ Copy the arguments object to a real array using [].slice.call(arguments) before modifying it.</li></ul><h2 id="item-24-use-a-variable-to-save-a-reference-to-arguments" tabindex="-1">Item 24: Use a Variable to Save a Reference to arguments <a class="header-anchor" href="#item-24-use-a-variable-to-save-a-reference-to-arguments" aria-label="Permalink to &quot;Item 24: Use a Variable to Save a Reference to arguments&quot;">​</a></h2><h3 id="things-to-remember-6" tabindex="-1">Things to Remember <a class="header-anchor" href="#things-to-remember-6" aria-label="Permalink to &quot;Things to Remember&quot;">​</a></h3><ul><li>✦ Be aware of the function nesting level when referring to arguments.</li><li>✦ Bind an explicitly scoped reference to arguments in order to refer to it from nested functions.</li></ul><h2 id="item-25-use-bind-to-extract-methods-with-a-fixed-receiver" tabindex="-1">Item 25: Use bind to Extract Methods with a Fixed Receiver <a class="header-anchor" href="#item-25-use-bind-to-extract-methods-with-a-fixed-receiver" aria-label="Permalink to &quot;Item 25: Use bind to Extract Methods with a Fixed Receiver&quot;">​</a></h2><h3 id="things-to-remember-7" tabindex="-1">Things to Remember <a class="header-anchor" href="#things-to-remember-7" aria-label="Permalink to &quot;Things to Remember&quot;">​</a></h3><ul><li>✦ Beware that extracting a method does not bind the method’s receiver to its object.</li><li>✦ When passing an object’s method to a higher-order function, use an anonymous function to call the method on the appropriate receiver.</li><li>✦ Use bind as a shorthand for creating a function bound to the appropriate receiver.</li></ul><h2 id="item-26-use-bind-to-curry-functions" tabindex="-1">Item 26: Use bind to Curry Functions <a class="header-anchor" href="#item-26-use-bind-to-curry-functions" aria-label="Permalink to &quot;Item 26: Use bind to Curry Functions&quot;">​</a></h2><h3 id="things-to-remember-8" tabindex="-1">Things to Remember <a class="header-anchor" href="#things-to-remember-8" aria-label="Permalink to &quot;Things to Remember&quot;">​</a></h3><ul><li>✦ Use bind to curry a function, that is, to create a delegating function with a fixed subset of the required arguments.</li><li>✦ Pass null or undefined as the receiver argument to curry a function that ignores its receiver.</li></ul><h2 id="item-27-prefer-closures-to-strings-for-encapsulating-code" tabindex="-1">Item 27: Prefer Closures to Strings for Encapsulating Code <a class="header-anchor" href="#item-27-prefer-closures-to-strings-for-encapsulating-code" aria-label="Permalink to &quot;Item 27: Prefer Closures to Strings for Encapsulating Code&quot;">​</a></h2><h3 id="things-to-remember-9" tabindex="-1">Things to Remember <a class="header-anchor" href="#things-to-remember-9" aria-label="Permalink to &quot;Things to Remember&quot;">​</a></h3><ul><li>✦ Never include local references in strings when sending them to APIs that execute them with eval.</li><li>✦ Prefer APIs that accept functions to call rather than strings to eval.</li></ul><h2 id="item-28-avoid-relying-on-the-tostring-method-of-functions" tabindex="-1">Item 28: Avoid Relying on the toString Method of Functions <a class="header-anchor" href="#item-28-avoid-relying-on-the-tostring-method-of-functions" aria-label="Permalink to &quot;Item 28: Avoid Relying on the toString Method of Functions&quot;">​</a></h2><h3 id="things-to-remember-10" tabindex="-1">Things to Remember <a class="header-anchor" href="#things-to-remember-10" aria-label="Permalink to &quot;Things to Remember&quot;">​</a></h3><ul><li>✦ JavaScript engines are not required to produce accurate reflections of function source code via toString.</li><li>✦ Never rely on precise details of function source, since different engines may produce different results from toString.</li><li>✦ The results of toString do not expose the values of local variables stored in a closure.</li><li>✦ In general, avoid using toString on functions.</li></ul><h2 id="item-29-avoid-nonstandard-stack-inspection-properties" tabindex="-1">Item 29: Avoid Nonstandard Stack Inspection Properties <a class="header-anchor" href="#item-29-avoid-nonstandard-stack-inspection-properties" aria-label="Permalink to &quot;Item 29: Avoid Nonstandard Stack Inspection Properties&quot;">​</a></h2><h3 id="things-to-remember-11" tabindex="-1">Things to Remember <a class="header-anchor" href="#things-to-remember-11" aria-label="Permalink to &quot;Things to Remember&quot;">​</a></h3><ul><li>✦ Avoid the nonstandard arguments.caller and arguments.callee, because they are not reliably portable.</li><li>✦ Avoid the nonstandard caller property of functions, because it does not reliably contain complete information about the stack.</li></ul>',37),n=[o];function s(l,h,c,m,u,d){return i(),t("div",null,n)}const g=e(r,[["render",s]]);export{b as __pageData,g as default};
